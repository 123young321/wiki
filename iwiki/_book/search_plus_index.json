{"./":{"url":"./","title":"简介","keywords":"","body":"简介 "},"doc/golang/":{"url":"doc/golang/","title":"Golang","keywords":"","body":"Golang学习笔记 环境搭建 "},"doc/golang/quickstart.html":{"url":"doc/golang/quickstart.html","title":"1.1 环境搭建","keywords":"","body":"环境搭建 Mac安装Golang 下载 & 安装 官网地址：https://golang.google.cn/dl/ 默认的安装目录 : /usr/local/go 环境变量 export PATH=/usr/local/go/bin:$PATH 创建项目 项目目录 创建项目的根目录 项目跟目录中分别创建 bin pkg src 三个目录 . ├── README.md ├── bin # 用于存放编译后的可执行文件 ├── pkg # 用于存放编译后的包文件 └── src # 源代码 配置系统环境变量 将go编译器的路径添加到环境变量 使用go命令可以直接调用自己编写的源代码 (安装时默认已执行) export PATH=/usr/local/go/bin:$PATH GOROOT : Go源码目录 export GOROOT=/usr/local/go GOPATH : 项目目录 export GOPATH=/Users/lipanpan/code/gocode/ GOBIN : 项目中 bin 目录 编译后的可执行文件 export GOPATH=/Users/lipanpan/code/gocode/bin 加载环境变量 source /etc/profile 注意：上述的方法为临时修改环境变量，如果想要永久修改环境变量，可以把环境变量添加到 .bash_profile 如若没有可以自行创建 cd vim .bash_profile 代码编写 编写代码的时候需要在src下进行编写 tree -I \"go_pointer|go_map|go_array|go_function|go_constant|go_slice|go_struct|go_condition\" -L 5 . ├── go_operation │ └── main.go ├── go_variable │ └── main.go └── quick_start.go 编写属于你的第一段 go 程序 package main import \"fmt\" func main() { fmt.Println(\"人生苦短，Let us go\") } 运行代码 运行的三种方式 go运行的三种方式分别为 go run go build go install go run go run 编译源码，并且执行源码的main函数，不会再当前目录下留下可执行文件 lipanpan@lipanpandeMacBook-Pro grammer % go run quick_start.go 人生苦短，Let us go go build go build 有多种编译方法，无参数编译，文件列表编译，指定包编译等 lipanpan@lipanpandeMacBook-Pro grammer % go build quick_start.go lipanpan@lipanpandeMacBook-Pro grammer % ll -rwxr-xr-x 1 lipanpan staff 1.9M 4 14 23:34 quick_start -rw-r--r-- 1 lipanpan staff 85B 4 14 23:22 quick_start.go lipanpan@lipanpandeMacBook-Pro grammer % ./quick_start 人生苦短，Let us go 常用的参数： 参考地址 ：go build 的详细使用方式方法请参考该地址 ：http://c.biancheng.net/view/120.html go install 命令 "},"doc/golang/variable.html":{"url":"doc/golang/variable.html","title":"1.2 变量","keywords":"","body":"变量 Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字，声明变量的一般形式是使用 var 关键字：var 变量名 = 变量值 变量声明 基本格式 声明并赋值 var name string = \"kevin\" 先声明后赋值 var age // 先声明 age = 18 声明多个变量 变量具有相同的数据类型 var country, city string = \"China\", \"Beijing\" 变量的初始化 var ( address string email string ) address = \"北京市\" email = \"mail@qq.com\" 变量的默认值 数值类型 0 布尔类型为 false 字符串为 \"\"（空字符串） 变量简写 省略类型 基本格式：var roomNumber = 6 var phone, jobNumber = 123456789, \"8-1234\" 省略关键字 基本格式：变量名 := 变量值 roomNumber := 666 全局变量&局部变量 全局变量 var address string = \"北京\" 注意： 声明全局变量不能省略数据类型，关键字 // 不能使用以下的声明方式进行声明全局变量 var country = \"China\" country := \"China\" 变量首字母大小写 大写 ：任意文件都可以使用该全局变量 （全局） 小写 ：当前包中可以使用 （局部）局部变量 局部变量中有严格的作用域，每个大括号就是一个作用域，每个作用域中都可定义相关的局部变量。 示例：局部变量不能被外部所使用 if city == \"北京\" { add := \"朝阳区\" fmt.Println(add) } fmt.Println(add) // ======= go run ======= ./main.go:37:14: undefined: add 常量 常量和变量唯一不同的就是常量在程序运行的过程中是一个不能被修改的值 定义常量 常量的定义方式有两种分别为显示定义和隐式定义 显式定义 ：const code string = \"golang\" 隐式定义 : const code = \"golang\" 当有多个相同类型的声明可以简写为 const code,ide = \"go\",\"vscode\" iota iota，特殊常量，可以认为是一个可以被编译器修改的常量。 const ( v1 = 1 v2 = 2 v3 = 3 ) fmt.Println(v1, v2, v3) // ======= go run ======= 1 2 3 const ( v4 = iota v5 v6 ) fmt.Println(v4, v5, v6) // ======= go run ======= 0 1 2 const ( v7 = iota + 2 _ v8 _ v9 ) fmt.Println(v7, v8, v9) // 2 4 6 上述可以进行拆分 fmt 输出 fmt是 go 中提供用于进行输入、输出的模块，相关的函数有： fmt.Print 输出 fmt.Println 输出并且在末尾添加换行符 fmt.Printf 格式化输出，常用的占位符 %s 字符串 %d 整型 %f 十进制小数 %2.f 保留小数点后两位 示例：格式化输出 package main import \"fmt\" func main() { fmt.Println(\"个人信息打印\") fmt.Printf(\"姓名：%s,年龄：%d\", \"lipanpan\", 18) } // ======= go run ======= 个人信息打印 姓名：lipanpan,年龄：18 Process finished with exit code 0 参考：更多占位符和文档可参考go源码：gitlab地址 示例：动态的输出 // 用户输入并赋值给变量 var val_input string fmt.Scanf(\"%s\",&val_input) if val_input == \"go\" { fmt.Println(\"输入正确\") }else { fmt.Println(\"输入错误\") } 输入 用户与程序之间的交互 fmt.Scan ：用户输入函数，等待输入的值满足所定义的要求，例如要求输入两个变量，如果没有输入两个会一直等待输入 fmt.Scanln ：等待回车，假设我们需要输入两个变量，如果此时输入回车则表示程序输入结束 fmt.Scanf ：格式化输入 示例1：fmt.Scan 交互输出 var name string var age int fmt.Println(\"请输入用户名/和年龄空格隔开\") // count 表示输入了几个值 err 表示输入错误返回的报错信息lee count, err := fmt.Scan(&name, &age) fmt.Println(count, err) fmt.Println(name, age) // ======= go run ======= 输入的值有误 lee w 1 expected integer // 成功的个数 报错信息 如果正确则 err 为 nil lee 0 // 0 表示的是 int 的默认值 // ======= go run ======= 输入的值正确 // lee 1 // 2 // lee 1 // 基于条件判断对返回值进行检查判断 _, err := fmt.Scan(&name, &age) // 注意此处的下划线 if err == nil { fmt.Println(\"输入成功\") } else { fmt.Println(\"输入的信息有误\", err) } 示例2：fmt.Scanf 格式化输出 返回值 count,err var info string fmt.Println(\"请输入info\") count,err = fmt.Scanf(\"显示输入的信息%s\",&info)// 如果此时输入 显示输入信息xx fmt.Println(info) // info 返回的是 xx // 如果不接受count的返回值，可以使用下划线进行展示 _,err = fmt.Scanf(\"显示输入的信息%s\",&info)// 如果此时输入 显示输入信息xx if err == nil { fmt.Println(\"输入成功\") }else { fmt.Println(\"输入失败\",err) } "},"doc/golang/datatype.html":{"url":"doc/golang/datatype.html","title":"1.3 数据类型","keywords":"","body":"[toc] 数据类型 Go语言的数值类型包含不同大小的整数型、浮点数和负数，每种数值类型都有大小范围以及正负符号。 整数类型 类型 有无符号 占用存储空间 范围 备注 int 有 uint 无 rune 有 byte 无 示例：整数类型 数字类型 浮点类型 浮点数形式 字符型 布尔型 "},"doc/javascript/":{"url":"doc/javascript/","title":"Javascript","keywords":"","body":""},"doc/javascript/object.html":{"url":"doc/javascript/object.html","title":"1.1 对象","keywords":"","body":""},"doc/javascript/condition.html":{"url":"doc/javascript/condition.html","title":"1.2 条件判断","keywords":"","body":"Javascript 对象(object)的判断 对象是否为空 属性是否为空 https://www.jb51.net/article/94318.htm "},"doc/jenkins/":{"url":"doc/jenkins/","title":"Jenkins","keywords":"","body":""},"doc/jenkins/install.html":{"url":"doc/jenkins/install.html","title":"1.1 安装","keywords":"","body":"Linux安装Jenkins 安装JDK https://www.cnblogs.com/wangzhichao/p/12692179.html 离线安装 https://www.cnblogs.com/xuliangxing/p/7066913.html yum安装 https://www.cnblogs.com/wangzhichao/p/12692179.html yum -y list java* 版本的选择 暴力安装 yum install java-1.8.0-openjdk* -y 默认安装位置 yum安装 https://blog.csdn.net/meiluo0626/article/details/106927562/ 下载依赖 ```shell 导入秘钥 ```shell 安装 rpm安装 获取管理员密码 cat /var/lib/jenkins/secrets/initialAdminPassword "},"doc/jenkins/integrategithub.html":{"url":"doc/jenkins/integrategithub.html","title":"1.2 Jenkins集成GitHub","keywords":"","body":"Jenkins集成Github 403 https://www.cnblogs.com/k4nz/p/14484589.html http://39.105.100.168:8080/ 创建任务 全局配置Github 生成github-personal-access-token 配置webhook https://blog.csdn.net/qq_21768483/article/details/80177920 "}}