{"./":{"url":"./","title":"简介","keywords":"","body":"简介 "},"doc/golang/":{"url":"doc/golang/","title":"Golang","keywords":"","body":"Golang学习笔记 环境搭建 "},"doc/golang/quickstart.html":{"url":"doc/golang/quickstart.html","title":"开发环境搭建","keywords":"","body":"[toc] 环境搭建 Mac安装Golang 下载 & 安装 官网地址：https://golang.google.cn/dl/ 默认的安装目录 : /usr/local/go 配置环境变量 export PATH=/usr/local/go/bin:$PATH 创建项目 项目目录介绍 创建项目的根目录 项目跟目录中分别创建 bin pkg src 三个目录 bin 用于存放编译后的可执行文件 pkg 用于存放编译后的包文件 src 源代码 lipanpan@lipanpandeMacBook-Pro gocode % tree -L 1 . ├── README.md ├── bin ├── pkg └── src 配置系统环境变量 将go编译器的路径添加到环境变量 使用go命令可以直接调用自己编写的源代码 (安装时默认已执行) export PATH=/usr/local/go/bin:$PATH GOROOT : Go源码目录，用于调用Go相关源码 export GOROOT=/usr/local/go GOPATH : 个人开发所创建的目录 export GOPATH=/Users/lipanpan/code/gocode/ GOBIN : 项目中 bin 目录 编译后的可执行文件 export GOPATH=/Users/lipanpan/code/gocode/bin 加载环境变量 source /etc/profile 注意：上述的方法为临时修改环境变量，如果想要永久修改环境变量，可以把环境变量添加到 .bash_profile 如若没有可以自行创建 cd vim .bash_profile 编写Golang代码 编写代码的时候需要在src下进行编写 lipanpan@lipanpandeMacBook-Pro grammer % tree -I \"go_pointer|go_map|go_array|go_function|go_constant|go_slice|go_struct|go_condition\" -L 5 . ├── go_operation │ └── main.go ├── go_variable │ └── main.go └── quick_start.go 编写属于你的第一段go程序 package main import \"fmt\" func main() { fmt.Println(\"人生苦短，Let us go\") } 运行代码 Golang运行代码三种方式 go运行的三种方式分别为 go run go build go install go run 命令 go run 编译源码，并且执行源码的main函数，不会再当前目录下留下可执行文件 lipanpan@lipanpandeMacBook-Pro grammer % go run quick_start.go 人生苦短，Let us go go build 命令 go build 有多种编译方法，无参数编译，文件列表编译，指定包编译等 lipanpan@lipanpandeMacBook-Pro grammer % go build quick_start.go lipanpan@lipanpandeMacBook-Pro grammer % ll -rwxr-xr-x 1 lipanpan staff 1.9M 4 14 23:34 quick_start -rw-r--r-- 1 lipanpan staff 85B 4 14 23:22 quick_start.go lipanpan@lipanpandeMacBook-Pro grammer % ./quick_start 人生苦短，Let us go 常用的参数： 参考地址 ：go build 的详细使用方式方法请参考该地址 ：http://c.biancheng.net/view/120.html go install 命令 "},"doc/golang/fmt&var&const.html":{"url":"doc/golang/fmt&var&const.html","title":"fmt&变量&常量","keywords":"","body":"[toc] fmt fmt是 go 中提供用于进行输入、输出的模块 fmt模块中常见的输出相关函数有： fmt.Print 输出 fmt.Println 输出并且在末尾添加换行符 fmt.Printf 格式化输出，常用的占位符 %s 字符串 %d 整型 %f 十进制小数 %2.f 保留小数点后两位 示例：格式化输出 package main import \"fmt\" func main() { fmt.Println(\"个人信息打印\") fmt.Printf(\"姓名：%s,年龄：%d\", \"lipanpan\", 18) } // ======= go run ======= 个人信息打印 姓名：lipanpan,年龄：18 Process finished with exit code 0 参考：更多占位符和文档可参考go源码：gitlab地址 变量 Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字 声明变量的一般形式是使用 var 关键字：var 变量名 = 变量值 变量声明 基本格式 声明并赋值 var name string = \"kevin\" 先声明后赋值 var age // 先声明 age = 18 声明多个变量 变量具有相同的数据类型 var country, city string = \"China\", \"Beijing\" 变量的初始化 var ( address string email string ) address = \"北京市\" email = \"mail@qq.com\" 变量的默认值 数值类型 0 布尔类型为 false 字符串为 \"\"（空字符串） 变量简写 省略类型 基本格式：var roomNumber = 6 var phone, jobNumber = 123456789, \"8-1234\" 省略关键字 基本格式：变量名 := 变量值 roomNumber := 666 全局变量&局部变量 全局变量 var address string = \"北京\" 注意： 声明全局变量不能省略数据类型，关键字 // 不能使用以下的声明方式进行声明全局变量 var country = \"China\" country := \"China\" 变量首字母大小写 大写 ：任意文件都可以使用该全局变量 （全局） 小写 ：当前包中可以使用 （局部） 局部变量 局部变量中有严格的作用域，每个大括号就是一个作用域，每个作用域中都可定义相关的局部变量。 示例：局部变量不能被外部所使用 if city == \"北京\" { add := \"朝阳区\" fmt.Println(add) } fmt.Println(add) // ======= go run ======= ./main.go:37:14: undefined: add "}}